[project]
name = "variation-normalizer"
authors = [
    {name = "Alex Wagner"},
    {name = "Kori Kuzma"},
    {name = "James Stevenson"}
]
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.8"
description = "VICC normalization routine for variations"
license = {file = "LICENSE"}
dependencies = [
    "biocommons.seqrepo",
    "fastapi",
    "uvicorn",
    "pydantic ==2.*",
    "ga4gh.vrs[extras] ~= 2.0.0a5",
    "gene-normalizer ~=0.3.0.dev1",
    "boto3",
    "cool-seq-tool ~=0.4.0.dev1",
    "bioutils"
]
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=6.0", "pytest-cov", "pytest-asyncio"]
dev = ["pre-commit", "ruff==0.2.0", "psycopg2-binary", "jupyter", "ipykernel"]

[project.urls]
Homepage = "https://github.com/cancervariants/variation-normalization"
Documentation = "https://github.com/cancervariants/variation-normalization"
Changelog = "https://github.com/cancervariants/variation-normalization/releases"
Source = "https://github.com/cancervariants/variation-normalization"
"Bug Tracker" = "https://github.com/cancervariants/variation-normalization/issues"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
version = {attr = "variation.version.__version__"}

# Scanning for namespace packages in the ``src`` directory is true by
# default in pyproject.toml, so you do NOT need to include the
# `tool.setuptools.packages.find` if it looks like the following:
# [tool.setuptools.packages.find]
# namespaces = true
# where = ["src"]

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report term-missing"
testpaths = ["tests"]

[tool.coverage.run]
branch = true

[tool.ruff]
src = ["src"]

lint.select = [
  "F",  # https://docs.astral.sh/ruff/rules/#pyflakes-f
  "E", "W",  # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
  "I",  # https://docs.astral.sh/ruff/rules/#isort-i
  "N",  # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "D",  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "ANN",  # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "ASYNC",  # https://docs.astral.sh/ruff/rules/#flake8-async-async
  "S",  # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  "B",  # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
  "A",  # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "C4",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
  "DTZ",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
  "T10",  # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
  "EM",  # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
  "G",  # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
  "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
  "T20",  # https://docs.astral.sh/ruff/rules/#flake8-print-t20
  "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
  "Q",  # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
  "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
  "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
  "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
  "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]

lint.fixable = [
  "I",
  "F401",
  "D",
  "UP",
  "ANN",
  "B",
  "C4",
  "G",
  "PIE",
  "PT",
  "RSE",
  "SIM",
  "RUF"
]
# ANN101 - missing-type-self
# ANN003 - missing-type-kwargs
# D203 - one-blank-line-before-class
# D205 - blank-line-after-summary
# D206 - indent-with-spaces*
# D213 - multi-line-summary-second-line
# D300 - triple-single-quotes*
# D400 - ends-in-period
# D415 - ends-in-punctuation
# E111 - indentation-with-invalid-multiple*
# E114 - indentation-with-invalid-multiple-comment*
# E117 - over-indented*
# E501 - line-too-long*
# W191 - tab-indentation*
# PGH003 - blanket-type-ignore
# *ignored for compatibility with formatter
lint.ignore = [
  "ANN101", "ANN003",
  "D203", "D205", "D206", "D213", "D300", "D400", "D415",
  "E111", "E114", "E117", "E501",
  "W191",
  "PGH003",
  "S321",
]

[tool.ruff.lint.per-file-ignores]
# ANN001 - missing-type-function-argument
# ANN2 - missing-return-type
# ANN201 - Missing type annotation
# ANN102 - missing-type-cls
# N805 - invalid-first-argument-name-for-method
# S101 - assert
# B011 - assert-false
# RUF001 - ambiguous-unicode-character-string
"tests/*" = ["ANN001", "ANN102", "ANN2", "S101", "B011"]
"src/variation/schemas/*" = ["ANN001", "ANN201", "N805", "S101"]
"codebuild/*" = ["T201"]

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Query"]
