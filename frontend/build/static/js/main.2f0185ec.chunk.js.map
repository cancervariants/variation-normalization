{"version":3,"sources":["services/VarlexApi.ts","components/TokenTable.tsx","components/ClassificationTable.tsx","components/SwaggerDocs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["varlexApi","axios","create","baseURL","headers","Accept","query","a","get","params","q","resp","data","console","log","TokenTable","state","tokenResponse","activeTimeout","onSearchChanged","event","window","clearTimeout","searchTerm","target","value","newTimer","setTimeout","tokenize","setState","prevState","getTokens","then","tableContents","tokens","length","rows","map","token","index","Table","Row","key","Cell","tokenType","Body","Input","icon","placeholder","onChange","this","celled","Header","HeaderCell","Component","ClassificationTable","classificationResponse","classify","getClassifications","classifications","c","classificationType","confidence","matchingTokens","join","nonMatchingTokens","SwaggerDocs","url","docExpansion","App","Menu","fixed","inverted","Container","Item","header","as","href","style","marginTop","Divider","section","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sYAGMA,E,OAAYC,EAAMC,OAAO,CAC7BC,QAAS,yBACTC,QAAS,CAAEC,OAAQ,sB,4CAGd,WAAyBC,GAAzB,eAAAC,EAAA,+EAEgBP,EAAUQ,IAAmB,WAAY,CAC1DC,OAAQ,CAAEC,EAAGJ,KAHZ,cAEGK,EAFH,yBAMIA,EAAKC,MANT,uCAQHC,QAAQC,IAAR,MARG,kBASI,MATJ,0D,kEAaA,WACLR,GADK,eAAAC,EAAA,+EAIgBP,EAAUQ,IAC3B,oBACA,CACEC,OAAQ,CAAEC,EAAGJ,KAPd,cAIGK,EAJH,yBAWIA,EAAKC,MAXT,uCAaHC,QAAQC,IAAR,MAbG,kBAcI,MAdJ,0D,oPCXA,IAAMC,EAAb,2MAEIC,MAAe,CACXC,cAAe,KACfC,cAAe,MAJvB,EAyBYC,gBAAkB,SAACC,EAA4CR,GAC/D,EAAKI,MAAME,eACXG,OAAOC,aAAa,EAAKN,MAAME,eAGnC,IAAIK,EAAaH,EAAMI,OAAOC,MAC1BC,EAAWL,OAAOM,YAAW,WAAQ,EAAKC,SAASL,KAAe,KAEtE,EAAKM,UAAS,SAACC,GACX,O,yVAAO,CAAP,GACOA,EADP,CAEIZ,cAAeQ,QApC/B,EAyCYE,SAAW,SAACL,ID3CjB,SAAP,mCC4CQQ,CAAUR,GAAc,IACnBS,MAAK,SAAAf,GAAa,OAAI,EAAKY,SAAS,CAAEZ,cAAeA,QA3ClE,EA8CYgB,cAAgB,WACpB,GAAI,EAAKjB,MAAMC,eAAiB,EAAKD,MAAMC,cAAciB,OAAOC,OAAS,EAAG,CACxE,IAAMC,EAAO,EAAKpB,MAAMC,cAAciB,OAAOG,KAAI,SAACC,EAAcC,GAAf,OAC7C,kBAACC,EAAA,EAAMC,IAAP,CAAWC,IAAKH,GACZ,kBAACC,EAAA,EAAMG,KAAP,KAAaL,EAAMA,OACnB,kBAACE,EAAA,EAAMG,KAAP,KAAaL,EAAMM,eAG3B,OAAO,kBAACJ,EAAA,EAAMK,KAAP,KAAaT,GAEpB,OAAO,+CAxDnB,wEAQQ,OACI,6BACI,oDACA,kBAACU,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,WAAWC,SAAUC,KAAK/B,kBAC3D,kBAACqB,EAAA,EAAD,CAAOW,QAAM,GACT,kBAACX,EAAA,EAAMY,OAAP,KACI,kBAACZ,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMa,WAAP,aACA,kBAACb,EAAA,EAAMa,WAAP,qBAGPH,KAAKjB,sBAnB1B,GAAgCqB,a,yPCAzB,IAAMC,EAAb,2MAEIvC,MAAe,CACXwC,uBAAwB,KACxBtC,cAAe,MAJvB,EA2BYC,gBAAkB,SAACC,EAA4CR,GAC/D,EAAKI,MAAME,eACXG,OAAOC,aAAa,EAAKN,MAAME,eAGnC,IAAIK,EAAaH,EAAMI,OAAOC,MAC1BC,EAAWL,OAAOM,YAAW,WAAQ,EAAK8B,SAASlC,KAAe,KAEtE,EAAKM,UAAS,SAACC,GACX,O,yVAAO,IACAA,EADP,CAEIZ,cAAeQ,QAtC/B,EA2CY+B,SAAW,SAAClC,IFhCjB,SAAP,mCEiCQmC,CAAmBnC,GAAc,IAC5BS,MAAK,SAAAwB,GAAsB,OAAI,EAAK3B,SAAS,CAAE2B,uBAAwBA,QA7CpF,EAgDYvB,cAAgB,WACpB,GAAI,EAAKjB,MAAMwC,wBAA0B,EAAKxC,MAAMwC,uBAAuBG,gBAAgBxB,OAAS,EAAG,CACnG,IAAMC,EAAO,EAAKpB,MAAMwC,uBAAuBG,gBAAgBtB,KAAI,SAACuB,EAAmBrB,GAApB,OAC/D,kBAACC,EAAA,EAAMC,IAAP,CAAWC,IAAKH,GACZ,kBAACC,EAAA,EAAMG,KAAP,KAAaiB,EAAEC,oBACf,kBAACrB,EAAA,EAAMG,KAAP,KAAaiB,EAAEE,YACf,kBAACtB,EAAA,EAAMG,KAAP,KAAaiB,EAAEG,eAAeC,KAAK,OACnC,kBAACxB,EAAA,EAAMG,KAAP,KAAaiB,EAAEK,kBAAkBD,KAAK,WAG9C,OAAO,kBAACxB,EAAA,EAAMK,KAAP,KAAaT,GAEpB,OAAO,+CA5DnB,wEAQQ,OACI,6BACI,sDACA,kBAACU,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,WAAWC,SAAUC,KAAK/B,kBAC3D,kBAACqB,EAAA,EAAD,CAAOW,QAAM,GACT,kBAACX,EAAA,EAAMY,OAAP,KACI,kBAACZ,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMa,WAAP,uBACA,kBAACb,EAAA,EAAMa,WAAP,mBACA,kBAACb,EAAA,EAAMa,WAAP,uBACA,kBAACb,EAAA,EAAMa,WAAP,2BAGPH,KAAKjB,sBArB1B,GAAyCqB,a,kBCL5BY,G,OAAb,iLAEQ,OAAO,kBAAC,IAAD,CAAWC,IAAI,qCAAqCC,aAAa,aAFhF,GAAiCd,cCuBlBe,EArBO,WACpB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAKI,KAAN,CAAWC,QAAM,GAAjB,oBACA,kBAACL,EAAA,EAAKI,KAAN,CAAWE,GAAG,IAAIC,KAAK,iBAAvB,kBAIJ,kBAACJ,EAAA,EAAD,CAAWK,MAAO,CAAEC,UAAW,QAC7B,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAASC,SAAO,IAChB,kBAAC,EAAD,MACA,kBAACD,EAAA,EAAD,CAASC,SAAO,IAChB,kBAAC,EAAD,SCVYC,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.2f0185ec.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { TokenResponse, ClassificationResponse } from \"../types/VarlexTypes\";\n\nconst varlexApi = axios.create({\n  baseURL: \"http://dev.varlex.org/\",\n  headers: { Accept: \"application/json\" }\n});\n\nexport async function getTokens(query: string): Promise<TokenResponse | null> {\n  try {\n    const resp = await varlexApi.get<TokenResponse>(\"/tokens/\", {\n      params: { q: query }\n    });\n\n    return resp.data;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\nexport async function getClassifications(\n  query: string\n): Promise<ClassificationResponse | null> {\n  try {\n    const resp = await varlexApi.get<ClassificationResponse>(\n      \"/classifications/\",\n      {\n        params: { q: query }\n      }\n    );\n\n    return resp.data;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Table, Input, InputOnChangeData } from \"semantic-ui-react\";\nimport { TokenResponse, Token } from \"../types/VarlexTypes\";\nimport { getTokens } from \"../services/VarlexApi\"\n\ntype State = {\n    tokenResponse: TokenResponse | null;\n    activeTimeout: number | null;\n};\n\nexport class TokenTable extends Component<{}, State> {\n\n    state: State = {\n        tokenResponse: null,\n        activeTimeout: null\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Tokenization Testing</h3>\n                <Input icon='search' placeholder='Tokenize' onChange={this.onSearchChanged} />\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Term</Table.HeaderCell>\n                            <Table.HeaderCell>Token Type</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    {this.tableContents()}\n                </Table>\n            </div>\n        );\n    }\n\n    private onSearchChanged = (event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n        if (this.state.activeTimeout) {\n            window.clearTimeout(this.state.activeTimeout);\n        }\n\n        let searchTerm = event.target.value;\n        let newTimer = window.setTimeout(() => { this.tokenize(searchTerm) }, 500);\n\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                activeTimeout: newTimer\n            }\n        });\n    }\n\n    private tokenize = (searchTerm?: string) => {\n        getTokens(searchTerm || '')\n            .then(tokenResponse => this.setState({ tokenResponse: tokenResponse }));\n    }\n\n    private tableContents = (): JSX.Element => {\n        if (this.state.tokenResponse && this.state.tokenResponse.tokens.length > 0) {\n            const rows = this.state.tokenResponse.tokens.map((token: Token, index: number) =>\n                <Table.Row key={index}>\n                    <Table.Cell>{token.token}</Table.Cell>\n                    <Table.Cell>{token.tokenType}</Table.Cell>\n                </Table.Row>\n            );\n            return <Table.Body>{rows}</Table.Body>\n        } else {\n            return <div>No Matches...</div>;\n        }\n    }\n}\n","import React, { Component } from \"react\";\nimport { Table, Input, InputOnChangeData } from \"semantic-ui-react\";\nimport { ClassificationResponse, Classification } from \"../types/VarlexTypes\";\nimport { getClassifications } from \"../services/VarlexApi\"\n\ntype State = {\n    classificationResponse: ClassificationResponse | null;\n    activeTimeout: number | null;\n};\n\nexport class ClassificationTable extends Component<{}, State> {\n\n    state: State = {\n        classificationResponse: null,\n        activeTimeout: null\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Classification Testing</h3>\n                <Input icon='search' placeholder='Classify' onChange={this.onSearchChanged} />\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Classification</Table.HeaderCell>\n                            <Table.HeaderCell>Confidence</Table.HeaderCell>\n                            <Table.HeaderCell>Matched Tokens</Table.HeaderCell>\n                            <Table.HeaderCell>Unmatched Tokens</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    {this.tableContents()}\n                </Table>\n            </div>\n        );\n    }\n\n    private onSearchChanged = (event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n        if (this.state.activeTimeout) {\n            window.clearTimeout(this.state.activeTimeout);\n        }\n\n        let searchTerm = event.target.value;\n        let newTimer = window.setTimeout(() => { this.classify(searchTerm) }, 500);\n\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                activeTimeout: newTimer\n            }\n        });\n    }\n\n    private classify = (searchTerm?: string) => {\n        getClassifications(searchTerm || '')\n            .then(classificationResponse => this.setState({ classificationResponse: classificationResponse }));\n    }\n\n    private tableContents = (): JSX.Element => {\n        if (this.state.classificationResponse && this.state.classificationResponse.classifications.length > 0) {\n            const rows = this.state.classificationResponse.classifications.map((c: Classification, index: number) =>\n                <Table.Row key={index}>\n                    <Table.Cell>{c.classificationType}</Table.Cell>\n                    <Table.Cell>{c.confidence}</Table.Cell>\n                    <Table.Cell>{c.matchingTokens.join(', ')}</Table.Cell>\n                    <Table.Cell>{c.nonMatchingTokens.join(', ')}</Table.Cell>\n                </Table.Row>\n            );\n            return <Table.Body>{rows}</Table.Body>\n        } else {\n            return <div>No Matches...</div>;\n        }\n    }\n}\n","import SwaggerUI from 'swagger-ui-react'\nimport \"swagger-ui-react/swagger-ui.css\"\nimport React, { Component } from 'react'\n\n\nexport class SwaggerDocs extends Component<{}, {}> {\n    render() {\n        return <SwaggerUI url='http://dev.varlex.org/openapi.json' docExpansion='list' />\n    }\n}","import React from 'react';\nimport './App.css';\nimport { TokenTable } from './components/TokenTable';\nimport { Menu, Container, Divider } from 'semantic-ui-react';\nimport { ClassificationTable } from './components/ClassificationTable';\nimport { SwaggerDocs } from './components/SwaggerDocs';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Menu fixed='top' inverted>\n        <Container>\n          <Menu.Item header>Varlex Prototype</Menu.Item>\n          <Menu.Item as='a' href=\"/openapi.json\">OpenAPI JSON</Menu.Item>\n        </Container>\n      </Menu>\n\n      <Container style={{ marginTop: '7em' }}>\n        <TokenTable />\n        <Divider section />\n        <ClassificationTable />\n        <Divider section />\n        <SwaggerDocs />\n      </Container>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}