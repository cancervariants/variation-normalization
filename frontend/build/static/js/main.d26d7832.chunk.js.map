{"version":3,"sources":["services/VarlexApi.ts","services/Config.ts","components/TokenTable.tsx","components/ClassificationTable.tsx","components/SwaggerDocs.tsx","components/ValidationResultRow.tsx","components/ValidationTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["varlexApi","axios","create","baseURL","process","headers","Accept","TokenTable","state","tokenResponse","activeTimeout","onSearchChanged","event","data","window","clearTimeout","searchTerm","target","value","newTimer","setTimeout","tokenize","setState","prevState","query","a","async","get","params","q","resp","console","log","getTokens","then","tableContents","tokens","length","rows","map","token","index","Table","Row","key","Cell","tokenType","matchType","inputString","Body","Divider","Input","icon","placeholder","onChange","this","celled","Header","HeaderCell","Component","ClassificationTable","classificationResponse","classify","getClassifications","classifications","c","classificationType","confidence","matchingTokens","join","nonMatchingTokens","SwaggerDocs","url","docExpansion","ValidationResultRow","selected","onCheckboxClicked","props","onSelected","result","tableRow","res","isValid","active","Checkbox","checked","conciseDescription","classification","humanDescription","errors","ValidationTable","validationResponse","selectedResults","Set","mainBody","components","keyCount","summary","validationSummary","push","validResults","invalidResults","headerSegment","resultTable","size","Segment","secondary","Group","clearing","Select","options","text","defaultValue","Button","animated","floated","Content","visible","hidden","Icon","name","content","color","tableHeader","valid","r","onResultSelected","newVal","selectedResult","add","delete","validate","getValidations","App","tabPanes","menuItem","render","Menu","fixed","inverted","Container","Item","header","as","href","style","marginTop","Tab","panes","menu","pointing","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qYAQA,IAAMA,E,OAAYC,EAAMC,OAAO,CAC7BC,QCROC,yBDSPC,QAAS,CAAEC,OAAQ,sBEAd,IAAMC,EAAb,2MAEIC,MAAe,CACXC,cAAe,KACfC,cAAe,MAJvB,EA4BYC,gBAAkB,SAACC,EAA4CC,GAC/D,EAAKL,MAAME,eACXI,OAAOC,aAAa,EAAKP,MAAME,eAGnC,IAAIM,EAAaJ,EAAMK,OAAOC,MAC1BC,EAAWL,OAAOM,YAAW,WAAQ,EAAKC,SAASL,KAAe,KAEtE,EAAKM,UAAS,SAACC,GACX,OAAO,eACAA,EADP,CAEIb,cAAeS,QAvC/B,EA4CYE,SAAW,SAACL,IFzCjB,SAAyBQ,GAAzB,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEgBzB,EAAU2B,IAAmB,WAAY,CAC1DC,OAAQ,CAAEC,EAAGL,MAHZ,cAEGM,EAFH,yBAMIA,EAAKjB,MANT,uCAQHkB,QAAQC,IAAR,MARG,kBASI,MATJ,yDE0CCC,CAAUjB,GAAc,IACnBkB,MAAK,SAAAzB,GAAa,OAAI,EAAKa,SAAS,CAAEb,cAAeA,QA9ClE,EAiDY0B,cAAgB,WACpB,GAAI,EAAK3B,MAAMC,eAAiB,EAAKD,MAAMC,cAAc2B,OAAOC,OAAS,EAAG,CACxE,IAAMC,EAAO,EAAK9B,MAAMC,cAAc2B,OAAOG,KAAI,SAACC,EAAcC,GAAf,OAC7C,kBAACC,EAAA,EAAMC,IAAP,CAAWC,IAAKH,GACZ,kBAACC,EAAA,EAAMG,KAAP,KAAaL,EAAMA,OACnB,kBAACE,EAAA,EAAMG,KAAP,KAAaL,EAAMM,WACnB,kBAACJ,EAAA,EAAMG,KAAP,KAAaL,EAAMO,WACnB,kBAACL,EAAA,EAAMG,KAAP,KAAaL,EAAMQ,iBAG3B,OAAO,kBAACN,EAAA,EAAMO,KAAP,KAAaX,GAEpB,OAAO,kBAACI,EAAA,EAAMO,KAAP,KAAY,kBAACP,EAAA,EAAMC,IAAP,KAAW,kBAACD,EAAA,EAAMG,KAAP,yBA7D1C,wEAQQ,OACI,6BACI,kBAACK,EAAA,EAAD,MACA,oDACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,WAAWC,SAAUC,KAAK5C,kBAC3D,kBAAC+B,EAAA,EAAD,CAAOc,QAAM,GACT,kBAACd,EAAA,EAAMe,OAAP,KACI,kBAACf,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMgB,WAAP,aACA,kBAAChB,EAAA,EAAMgB,WAAP,mBACA,kBAAChB,EAAA,EAAMgB,WAAP,mBACA,kBAAChB,EAAA,EAAMgB,WAAP,uBAGPH,KAAKpB,sBAtB1B,GAAgCwB,a,2BCAnBC,EAAb,2MAEIpD,MAAe,CACXqD,uBAAwB,KACxBnD,cAAe,MAJvB,EA4BYC,gBAAkB,SAACC,EAA4CC,GAC/D,EAAKL,MAAME,eACXI,OAAOC,aAAa,EAAKP,MAAME,eAGnC,IAAIM,EAAaJ,EAAMK,OAAOC,MAC1BC,EAAWL,OAAOM,YAAW,WAAQ,EAAK0C,SAAS9C,KAAe,KAEtE,EAAKM,UAAS,SAACC,GACX,OAAO,eACAA,EADP,CAEIb,cAAeS,QAvC/B,EA4CY2C,SAAW,SAAC9C,IH5BjB,SACLQ,GADK,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAIgBzB,EAAU2B,IAC3B,oBACA,CACEC,OAAQ,CAAEC,EAAGL,MAPd,cAIGM,EAJH,yBAWIA,EAAKjB,MAXT,uCAaHkB,QAAQC,IAAR,MAbG,kBAcI,MAdJ,yDG6BC+B,CAAmB/C,GAAc,IAC5BkB,MAAK,SAAA2B,GAAsB,OAAI,EAAKvC,SAAS,CAAEuC,uBAAwBA,QA9CpF,EAiDY1B,cAAgB,WACpB,GAAI,EAAK3B,MAAMqD,wBAA0B,EAAKrD,MAAMqD,uBAAuBG,gBAAgB3B,OAAS,EAAG,CACnG,IAAMC,EAAO,EAAK9B,MAAMqD,uBAAuBG,gBAAgBzB,KAAI,SAAC0B,EAAmBxB,GAApB,OAC/D,kBAACC,EAAA,EAAMC,IAAP,CAAWC,IAAKH,GACZ,kBAACC,EAAA,EAAMG,KAAP,KAAaoB,EAAEC,oBACf,kBAACxB,EAAA,EAAMG,KAAP,KAAaoB,EAAEE,YACf,kBAACzB,EAAA,EAAMG,KAAP,KAAaoB,EAAEG,eAAeC,KAAK,OACnC,kBAAC3B,EAAA,EAAMG,KAAP,KAAaoB,EAAEK,kBAAkBD,KAAK,WAG9C,OAAO,kBAAC3B,EAAA,EAAMO,KAAP,KAAaX,GAEpB,OAAO,kBAACI,EAAA,EAAMO,KAAP,KAAY,kBAACP,EAAA,EAAMC,IAAP,KAAW,kBAACD,EAAA,EAAMG,KAAP,yBA7D1C,wEAQQ,OACI,6BACI,kBAACK,EAAA,EAAD,MACA,sDACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,WAAWC,SAAUC,KAAK5C,kBAC3D,kBAAC+B,EAAA,EAAD,CAAOc,QAAM,GACT,kBAACd,EAAA,EAAMe,OAAP,KACI,kBAACf,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMgB,WAAP,uBACA,kBAAChB,EAAA,EAAMgB,WAAP,mBACA,kBAAChB,EAAA,EAAMgB,WAAP,uBACA,kBAAChB,EAAA,EAAMgB,WAAP,2BAGPH,KAAKpB,sBAtB1B,GAAyCwB,a,kBCJ5BY,G,OAAb,iLAEQ,IAAIC,EAAW,UHPdpE,yBGOc,gBACf,OAAO,kBAAC,IAAD,CAAWoE,IAAKA,EAAKC,aAAa,aAHjD,GAAiCd,c,4CCYpBe,EAAb,2MAEIlE,MAAe,CACXmE,UAAU,GAHlB,EAWYC,kBAAoB,WACxB,EAAKC,MAAMC,WAAW,EAAKD,MAAME,QAAS,EAAKvE,MAAMmE,UACrD,EAAKrD,UAAS,SAACC,GACX,OAAO,eACAA,EADP,CAEIoD,UAAWpD,EAAUoD,eAhBrC,EAsBYK,SAAW,SAACC,EAAuBxC,GACvC,OAAIwC,EAAIC,QACI,kBAACxC,EAAA,EAAMC,IAAP,CAAWC,IAAKH,EAAO0C,OAAQ,EAAK3E,MAAMmE,UAC9C,kBAACjC,EAAA,EAAMG,KAAP,KAAY,kBAACuC,EAAA,EAAD,CAAUC,QAAS,EAAK7E,MAAMmE,SAAUrB,SAAU,EAAKsB,qBACnE,kBAAClC,EAAA,EAAMG,KAAP,KAAaoC,EAAIK,oBACjB,kBAAC5C,EAAA,EAAMG,KAAP,aACA,kBAACH,EAAA,EAAMG,KAAP,KAAaoC,EAAIM,eAAerB,oBAChC,kBAACxB,EAAA,EAAMG,KAAP,KAAaoC,EAAIO,mBAGb,kBAAC9C,EAAA,EAAMC,IAAP,CAAWC,IAAKH,EAAO0C,OAAQ,EAAK3E,MAAMmE,UAC9C,kBAACjC,EAAA,EAAMG,KAAP,KAAY,kBAACuC,EAAA,EAAD,CAAUC,QAAS,EAAK7E,MAAMmE,SAAUrB,SAAU,EAAKsB,qBACnE,kBAAClC,EAAA,EAAMG,KAAP,KAAaoC,EAAIK,oBACjB,kBAAC5C,EAAA,EAAMG,KAAP,aACA,kBAACH,EAAA,EAAMG,KAAP,KAAaoC,EAAIM,eAAerB,oBAChC,kBAACxB,EAAA,EAAMG,KAAP,KAAaoC,EAAIO,kBACjB,kBAAC9C,EAAA,EAAMG,KAAP,KAAaoC,EAAIQ,OAAOpB,KAAK,SAtC7C,wEAOQ,OAAOd,KAAKyB,SAASzB,KAAKsB,MAAME,OAAQxB,KAAKsB,MAAMpC,WAP3D,GAAyCkB,aCL5B+B,EAAb,2MACIlF,MAAe,CACXmF,mBAAoB,KACpBjF,cAAe,KACfkF,gBAAiB,IAAIC,KAJ7B,EAkBYC,SAAW,WACf,IAAIC,EAAa,GACbC,EAAW,EACf,GAAI,EAAKxF,MAAMmF,mBAAoB,CAC/B,IAAMM,EAAU,EAAKzF,MAAMmF,mBAAmBO,kBAC9CH,EAAWI,KAAK,kBAACjD,EAAA,EAAD,CAASN,IAAKoD,QAE1BC,EAAQG,aAAa/D,OAAS,GAAK4D,EAAQI,eAAehE,OAAS,IACnE0D,EAAWI,KAAK,EAAKG,cAAcN,MAGnCC,EAAQG,aAAa/D,OAAS,IAC9B0D,EAAWI,KAAK,EAAKI,YAAYN,EAAQG,aAAcJ,MACvDD,EAAWI,KAAK,kBAACjD,EAAA,EAAD,CAASN,IAAKoD,QAE9BC,EAAQI,eAAehE,OAAS,IAChC0D,EAAWI,KAAK,EAAKI,YAAYN,EAAQI,eAAgBL,MACzDD,EAAWI,KAAK,kBAACjD,EAAA,EAAD,CAASN,IAAKoD,QAItC,OAA0B,IAAtBD,EAAW1D,OACJ,8CAEA,6BACF0D,IA3CjB,EAgDYO,cAAgB,SAAC7D,GAErB,GAAwC,IAApC,EAAKjC,MAAMoF,gBAAgBY,KAC3B,OAAO,kBAACC,EAAA,EAAD,CAASC,WAAS,EAAC9D,IAAKH,GAAxB,qCAOP,OACI,kBAACgE,EAAA,EAAQE,MAAT,CAAe/D,IAAKH,GAChB,kBAACgE,EAAA,EAAD,CAASC,WAAS,GACd,2BAAI,EAAKlG,MAAMoF,gBAAgBY,KAA/B,0BAEJ,kBAACC,EAAA,EAAD,CAASG,UAAQ,EAACF,WAAS,GACvB,kBAACG,EAAA,EAAD,CAAQC,QAXH,CACb,CAAElE,IAAK,OAAQmE,KAAM,OAAQ7F,MAAO,QACpC,CAAE0B,IAAK,MAAOmE,KAAM,MAAO7F,MAAO,QASG8F,aAAa,QAC1C,kBAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAAQ,SACrB,kBAACF,EAAA,EAAOG,QAAR,CAAgBC,SAAO,GAAvB,UACA,kBAACJ,EAAA,EAAOG,QAAR,CAAgBE,QAAM,GAClB,kBAACC,EAAA,EAAD,CAAMC,KAAK,wBApE3C,EA6EYjB,YAAc,SAACkB,EAA6BhF,GAChD,IAAMiF,EAAQD,EAAQpF,OAAS,GAAKoF,EAAQ,GAAGvC,QAAU,QAAU,MACnE,OACI,kBAACxC,EAAA,EAAD,CAAOgF,MAAOA,EAAO9E,IAAKH,GACrB,EAAKkF,YAAYF,EAAQ,GAAGvC,SAC5B,EAAK/C,cAAcsF,KAlFpC,EAuFYE,YAAc,SAACC,GACnB,OAAIA,EACQ,kBAAClF,EAAA,EAAMe,OAAP,KACJ,kBAACf,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMgB,WAAP,MACA,kBAAChB,EAAA,EAAMgB,WAAP,2BACA,kBAAChB,EAAA,EAAMgB,WAAP,wBACA,kBAAChB,EAAA,EAAMgB,WAAP,uBACA,kBAAChB,EAAA,EAAMgB,WAAP,sBAIA,kBAAChB,EAAA,EAAMe,OAAP,KACJ,kBAACf,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMgB,WAAP,MACA,kBAAChB,EAAA,EAAMgB,WAAP,2BACA,kBAAChB,EAAA,EAAMgB,WAAP,wBACA,kBAAChB,EAAA,EAAMgB,WAAP,uBACA,kBAAChB,EAAA,EAAMgB,WAAP,oBACA,kBAAChB,EAAA,EAAMgB,WAAP,6BA1GpB,EAgHYvB,cAAgB,SAACsF,GAErB,IAAMnF,EAAOmF,EAAQlF,KAAI,SAACsF,EAAqBpF,GAAtB,OACrB,kBAAC,EAAD,CAAqBsC,OAAQ8C,EAAGjF,IAAKH,EAAOA,MAAOA,EAAOqC,WAAY,EAAKgD,sBAE/E,OAAO,kBAACpF,EAAA,EAAMO,KAAP,KAAaX,IArH5B,EAyHYwF,iBAAqC,SAAC7C,EAAuB8C,GACjE,EAAKzG,UAAS,SAACC,GACX,OAAO,eACAA,EADP,CAEIyG,eAAgBD,EAASxG,EAAUqE,gBAAgBqC,IAAIhD,GAAO1D,EAAUqE,gBAAgBsC,OAAOjD,SA7H/G,EAkIYtE,gBAAkB,SAACC,EAA4CC,GAC/D,EAAKL,MAAME,eACXI,OAAOC,aAAa,EAAKP,MAAME,eAGnC,IAAIM,EAAaJ,EAAMK,OAAOC,MAC1BC,EAAWL,OAAOM,YAAW,WAAQ,EAAK+G,SAASnH,KAAe,KAEtE,EAAKM,UAAS,SAACC,GACX,OAAO,eACAA,EADP,CAEIb,cAAeS,QA7I/B,EAkJYgH,SAAW,SAACnH,INnHjB,SACLQ,GADK,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAIgBzB,EAAU2B,IAAwB,gBAAiB,CACpEC,OAAQ,CAAEC,EAAGL,MALZ,cAIGM,EAJH,yBAQIA,EAAKjB,MART,uCAUHkB,QAAQC,IAAR,MAVG,kBAWI,MAXJ,yDMoHCoG,CAAepH,GAAc,IACxBkB,MAAK,SAAAyD,GAAkB,OAAI,EAAKrE,SAAS,CAAEqE,mBAAoBA,QApJ5E,wEAQQ,OACI,6BACI,kBAACzC,EAAA,EAAD,MACA,kDACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,WAAWC,SAAUC,KAAK5C,kBAC1D4C,KAAKuC,gBAbtB,GAAqCnC,aCkBtB0E,EAvBO,WACpB,IAAMC,EAAW,CACf,CAAEC,SAAU,YAAaC,OAAQ,kBAAM,kBAAC,EAAD,QACvC,CAAED,SAAU,aAAcC,OAAQ,kBAAM,kBAAC,EAAD,QACxC,CAAED,SAAU,YAAaC,OAAQ,kBAAM,kBAAC,EAAD,QACvC,CAAED,SAAU,eAAgBC,OAAQ,kBAAM,kBAAC,EAAD,SAE5C,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAKI,KAAN,CAAWC,QAAM,GAAjB,oBACA,kBAACL,EAAA,EAAKI,KAAN,CAAWE,GAAG,IAAIC,KAAK,iBAAvB,kBAIJ,kBAACJ,EAAA,EAAD,CAAWK,MAAO,CAAEC,UAAW,QAC7B,kBAACC,EAAA,EAAD,CAAKC,MAAOd,EAAUe,KAAM,CAAEC,UAAU,QCb5BC,QACW,cAA7BzI,OAAO0I,SAASC,UAEe,UAA7B3I,OAAO0I,SAASC,UAEhB3I,OAAO0I,SAASC,SAASC,MACvB,2DCZNC,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9H,MAAK,SAAA+H,GACjCA,EAAaC,kB","file":"static/js/main.d26d7832.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {\n  TokenResponse,\n  ClassificationResponse,\n  ValidationResponse\n} from \"../types/VarlexTypes\";\nimport { varlexApiDomain } from \"../services/Config\";\n\nconst varlexApi = axios.create({\n  baseURL: varlexApiDomain(),\n  headers: { Accept: \"application/json\" }\n});\n\nexport async function getTokens(query: string): Promise<TokenResponse | null> {\n  try {\n    const resp = await varlexApi.get<TokenResponse>(\"/tokens/\", {\n      params: { q: query }\n    });\n\n    return resp.data;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\nexport async function getClassifications(\n  query: string\n): Promise<ClassificationResponse | null> {\n  try {\n    const resp = await varlexApi.get<ClassificationResponse>(\n      \"/classifications/\",\n      {\n        params: { q: query }\n      }\n    );\n\n    return resp.data;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\nexport async function getValidations(\n  query: string\n): Promise<ValidationResponse | null> {\n  try {\n    const resp = await varlexApi.get<ValidationResponse>(\"/validations/\", {\n      params: { q: query }\n    });\n\n    return resp.data;\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n","export function varlexApiDomain(): string {\n  return process.env.REACT_APP_API_DOMAIN || \"/\";\n}\n","import React, { Component } from \"react\";\nimport { Table, Input, InputOnChangeData, Divider } from \"semantic-ui-react\";\nimport { TokenResponse, Token } from \"../types/VarlexTypes\";\nimport { getTokens } from \"../services/VarlexApi\"\n\ntype State = {\n    tokenResponse: TokenResponse | null;\n    activeTimeout: number | null;\n};\n\nexport class TokenTable extends Component<{}, State> {\n\n    state: State = {\n        tokenResponse: null,\n        activeTimeout: null\n    }\n\n    render() {\n        return (\n            <div>\n                <Divider />\n                <h3>Tokenization Testing</h3>\n                <Input icon='search' placeholder='Tokenize' onChange={this.onSearchChanged} />\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Term</Table.HeaderCell>\n                            <Table.HeaderCell>Token Type</Table.HeaderCell>\n                            <Table.HeaderCell>Match Type</Table.HeaderCell>\n                            <Table.HeaderCell>Input String</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    {this.tableContents()}\n                </Table>\n            </div>\n        );\n    }\n\n    private onSearchChanged = (event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n        if (this.state.activeTimeout) {\n            window.clearTimeout(this.state.activeTimeout);\n        }\n\n        let searchTerm = event.target.value;\n        let newTimer = window.setTimeout(() => { this.tokenize(searchTerm) }, 500);\n\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                activeTimeout: newTimer\n            }\n        });\n    }\n\n    private tokenize = (searchTerm?: string) => {\n        getTokens(searchTerm || '')\n            .then(tokenResponse => this.setState({ tokenResponse: tokenResponse }));\n    }\n\n    private tableContents = (): JSX.Element => {\n        if (this.state.tokenResponse && this.state.tokenResponse.tokens.length > 0) {\n            const rows = this.state.tokenResponse.tokens.map((token: Token, index: number) =>\n                <Table.Row key={index}>\n                    <Table.Cell>{token.token}</Table.Cell>\n                    <Table.Cell>{token.tokenType}</Table.Cell>\n                    <Table.Cell>{token.matchType}</Table.Cell>\n                    <Table.Cell>{token.inputString}</Table.Cell>\n                </Table.Row>\n            );\n            return <Table.Body>{rows}</Table.Body>\n        } else {\n            return <Table.Body><Table.Row><Table.Cell>No Matches...</Table.Cell></Table.Row></Table.Body>;\n        }\n    }\n}\n","import React, { Component } from \"react\";\nimport { Table, Input, InputOnChangeData, Divider } from \"semantic-ui-react\";\nimport { ClassificationResponse, Classification } from \"../types/VarlexTypes\";\nimport { getClassifications } from \"../services/VarlexApi\"\n\ntype State = {\n    classificationResponse: ClassificationResponse | null;\n    activeTimeout: number | null;\n};\n\nexport class ClassificationTable extends Component<{}, State> {\n\n    state: State = {\n        classificationResponse: null,\n        activeTimeout: null\n    }\n\n    render() {\n        return (\n            <div>\n                <Divider />\n                <h3>Classification Testing</h3>\n                <Input icon='search' placeholder='Classify' onChange={this.onSearchChanged} />\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Classification</Table.HeaderCell>\n                            <Table.HeaderCell>Confidence</Table.HeaderCell>\n                            <Table.HeaderCell>Matched Tokens</Table.HeaderCell>\n                            <Table.HeaderCell>Unmatched Tokens</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    {this.tableContents()}\n                </Table>\n            </div>\n        );\n    }\n\n    private onSearchChanged = (event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n        if (this.state.activeTimeout) {\n            window.clearTimeout(this.state.activeTimeout);\n        }\n\n        let searchTerm = event.target.value;\n        let newTimer = window.setTimeout(() => { this.classify(searchTerm) }, 500);\n\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                activeTimeout: newTimer\n            }\n        });\n    }\n\n    private classify = (searchTerm?: string) => {\n        getClassifications(searchTerm || '')\n            .then(classificationResponse => this.setState({ classificationResponse: classificationResponse }));\n    }\n\n    private tableContents = (): JSX.Element => {\n        if (this.state.classificationResponse && this.state.classificationResponse.classifications.length > 0) {\n            const rows = this.state.classificationResponse.classifications.map((c: Classification, index: number) =>\n                <Table.Row key={index}>\n                    <Table.Cell>{c.classificationType}</Table.Cell>\n                    <Table.Cell>{c.confidence}</Table.Cell>\n                    <Table.Cell>{c.matchingTokens.join(', ')}</Table.Cell>\n                    <Table.Cell>{c.nonMatchingTokens.join(', ')}</Table.Cell>\n                </Table.Row>\n            );\n            return <Table.Body>{rows}</Table.Body>\n        } else {\n            return <Table.Body><Table.Row><Table.Cell>No Matches...</Table.Cell></Table.Row></Table.Body>;\n        }\n    }\n}\n","import SwaggerUI from 'swagger-ui-react'\nimport \"swagger-ui-react/swagger-ui.css\"\nimport React, { Component } from 'react'\nimport { varlexApiDomain } from \"../services/Config\";\n\n\nexport class SwaggerDocs extends Component<{}, {}> {\n    render() {\n        let url: string = `${varlexApiDomain()}openapi.json`\n        return <SwaggerUI url={url} docExpansion='list' />\n    }\n}","import React from \"react\";\nimport { Component } from \"react\";\nimport { ValidationResult } from \"../types/VarlexTypes\";\nimport { Table, Checkbox } from \"semantic-ui-react\";\n\n\nexport type CheckboxCallback = (res: ValidationResult, newVal: boolean) => void\n\ntype State = {\n    selected: boolean\n}\n\ntype Props = {\n    result: ValidationResult;\n    index: number;\n    onSelected: CheckboxCallback;\n}\n\nexport class ValidationResultRow extends Component<Props, State> {\n\n    state: State = {\n        selected: false\n    }\n\n    render() {\n        return this.tableRow(this.props.result, this.props.index)\n    }\n\n\n    private onCheckboxClicked = (): void => {\n        this.props.onSelected(this.props.result, !this.state.selected);\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                selected: !prevState.selected\n            }\n        });\n    }\n\n\n    private tableRow = (res: ValidationResult, index: number): JSX.Element => {\n        if (res.isValid) {\n            return (<Table.Row key={index} active={this.state.selected}>\n                <Table.Cell><Checkbox checked={this.state.selected} onChange={this.onCheckboxClicked} /></Table.Cell>\n                <Table.Cell>{res.conciseDescription}</Table.Cell>\n                <Table.Cell>hg38</Table.Cell>\n                <Table.Cell>{res.classification.classificationType}</Table.Cell>\n                <Table.Cell>{res.humanDescription}</Table.Cell>\n            </Table.Row>)\n        } else {\n            return (<Table.Row key={index} active={this.state.selected}>\n                <Table.Cell><Checkbox checked={this.state.selected} onChange={this.onCheckboxClicked} /></Table.Cell>\n                <Table.Cell>{res.conciseDescription}</Table.Cell>\n                <Table.Cell>hg38</Table.Cell>\n                <Table.Cell>{res.classification.classificationType}</Table.Cell>\n                <Table.Cell>{res.humanDescription}</Table.Cell>\n                <Table.Cell>{res.errors.join(', ')}</Table.Cell>\n            </Table.Row>)\n        }\n    }\n}","import { Component } from \"react\";\nimport { ValidationResponse, ValidationResult } from \"../types/VarlexTypes\";\nimport { Divider, Input, InputOnChangeData, Table, Segment, Button, Icon, Select } from \"semantic-ui-react\";\nimport React from \"react\";\nimport { getValidations } from \"../services/VarlexApi\";\nimport { ValidationResultRow, CheckboxCallback } from \"./ValidationResultRow\";\n\ntype State = {\n    validationResponse: ValidationResponse | null;\n    activeTimeout: number | null;\n    selectedResults: Set<ValidationResult>;\n}\n\nexport class ValidationTable extends Component<{}, State> {\n    state: State = {\n        validationResponse: null,\n        activeTimeout: null,\n        selectedResults: new Set()\n    }\n\n    render() {\n        return (\n            <div>\n                <Divider />\n                <h3>Validation Testing</h3>\n                <Input icon='search' placeholder='Validate' onChange={this.onSearchChanged} />\n                {this.mainBody()}\n            </div >\n        );\n    }\n\n    private mainBody = (): JSX.Element => {\n        let components = [];\n        let keyCount = 0\n        if (this.state.validationResponse) {\n            const summary = this.state.validationResponse.validationSummary\n            components.push(<Divider key={keyCount++} />)\n\n            if (summary.validResults.length > 0 || summary.invalidResults.length > 0) {\n                components.push(this.headerSegment(keyCount++))\n            }\n\n            if (summary.validResults.length > 0) {\n                components.push(this.resultTable(summary.validResults, keyCount++))\n                components.push(<Divider key={keyCount++} />)\n            }\n            if (summary.invalidResults.length > 0) {\n                components.push(this.resultTable(summary.invalidResults, keyCount++))\n                components.push(<Divider key={keyCount++} />)\n            }\n        }\n\n        if (components.length === 0) {\n            return <div>No Matches...</div>;\n        } else {\n            return <div>\n                {components}\n            </div>\n        }\n    }\n\n    private headerSegment = (index: number): JSX.Element => {\n\n        if (this.state.selectedResults.size === 0) {\n            return <Segment secondary key={index}>Please select variants for export</Segment>\n        } else {\n            let formatOpts = [\n                { key: 'json', text: 'JSON', value: 'json' },\n                { key: 'vrs', text: 'VRS', value: 'vrs' },\n            ]\n\n            return (\n                <Segment.Group key={index}>\n                    <Segment secondary>\n                        <p>{this.state.selectedResults.size} variant(s) selected.</p>\n                    </Segment>\n                    <Segment clearing secondary>\n                        <Select options={formatOpts} defaultValue='vrs' />\n                        <Button animated floated=\"right\">\n                            <Button.Content visible>Export</Button.Content>\n                            <Button.Content hidden>\n                                <Icon name='external share' />\n                            </Button.Content>\n                        </Button>\n                    </Segment>\n                </Segment.Group>\n            )\n        }\n    }\n\n    private resultTable = (content: ValidationResult[], index: number): JSX.Element => {\n        const color = content.length > 0 && content[0].isValid ? 'green' : 'red'\n        return (\n            <Table color={color} key={index}>\n                {this.tableHeader(content[0].isValid)}\n                {this.tableContents(content)}\n            </Table>\n        );\n    }\n\n    private tableHeader = (valid: boolean): JSX.Element => {\n        if (valid) {\n            return (<Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell></Table.HeaderCell>\n                    <Table.HeaderCell>Identified Variant</Table.HeaderCell>\n                    <Table.HeaderCell>Reference Build</Table.HeaderCell>\n                    <Table.HeaderCell>Classification</Table.HeaderCell>\n                    <Table.HeaderCell>Description</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>);\n        } else {\n            return (<Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell></Table.HeaderCell>\n                    <Table.HeaderCell>Identified Variant</Table.HeaderCell>\n                    <Table.HeaderCell>Reference Build</Table.HeaderCell>\n                    <Table.HeaderCell>Classification</Table.HeaderCell>\n                    <Table.HeaderCell>Description</Table.HeaderCell>\n                    <Table.HeaderCell>Validation Errors</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>);\n        }\n    }\n\n    private tableContents = (content: ValidationResult[]): JSX.Element => {\n\n        const rows = content.map((r: ValidationResult, index: number) =>\n            <ValidationResultRow result={r} key={index} index={index} onSelected={this.onResultSelected} />\n        );\n        return <Table.Body>{rows}</Table.Body>;\n    }\n\n\n    private onResultSelected: CheckboxCallback = (res: ValidationResult, newVal: boolean): void => {\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                selectedResult: newVal ? prevState.selectedResults.add(res) : prevState.selectedResults.delete(res)\n            }\n        })\n    }\n\n    private onSearchChanged = (event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n        if (this.state.activeTimeout) {\n            window.clearTimeout(this.state.activeTimeout);\n        }\n\n        let searchTerm = event.target.value;\n        let newTimer = window.setTimeout(() => { this.validate(searchTerm) }, 500);\n\n        this.setState((prevState) => {\n            return {\n                ...prevState,\n                activeTimeout: newTimer\n            }\n        });\n    }\n\n    private validate = (searchTerm?: string) => {\n        getValidations(searchTerm || '')\n            .then(validationResponse => this.setState({ validationResponse: validationResponse }))\n    }\n}","import React from 'react';\nimport './App.css';\nimport { TokenTable } from './components/TokenTable';\nimport { Menu, Container, Tab } from 'semantic-ui-react';\nimport { ClassificationTable } from './components/ClassificationTable';\nimport { SwaggerDocs } from './components/SwaggerDocs';\nimport { ValidationTable } from './components/ValidationTable';\n\nconst App: React.FC = () => {\n  const tabPanes = [\n    { menuItem: 'Tokenizer', render: () => <TokenTable /> },\n    { menuItem: 'Classifier', render: () => <ClassificationTable /> },\n    { menuItem: 'Validator', render: () => <ValidationTable /> },\n    { menuItem: 'OpenAPI Docs', render: () => <SwaggerDocs /> },\n  ]\n  return (\n    <div>\n      <Menu fixed='top' inverted>\n        <Container>\n          <Menu.Item header>Varlex Prototype</Menu.Item>\n          <Menu.Item as='a' href=\"/openapi.json\">OpenAPI JSON</Menu.Item>\n        </Container>\n      </Menu>\n\n      <Container style={{ marginTop: '7em' }}>\n        <Tab panes={tabPanes} menu={{ pointing: true }} />\n      </Container>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}